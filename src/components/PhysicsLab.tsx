
import React, { useState } from 'react';
import { Beaker, Zap, Eye, Waves, Settings, Play, RotateCcw, Save, Share2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface Component {
  id: string;
  type: string;
  x: number;
  y: number;
  rotation: number;
  properties: any;
}

const PhysicsLab: React.FC = () => {
  const [activeTab, setActiveTab] = useState('electrical');
  const [components, setComponents] = useState<Component[]>([]);
  const [selectedComponent, setSelectedComponent] = useState<string | null>(null);
  const [isSimulating, setIsSimulating] = useState(false);
  const [gridSize] = useState(20);

  const electricalComponents = [
    { id: 'battery', name: '–ë–∞—Ç–∞—Ä–µ–π–∫–∞', icon: 'üîã', color: 'quantum-green' },
    { id: 'resistor', name: '–†–µ–∑–∏—Å—Ç–æ—Ä', icon: '‚ö°', color: 'quantum-orange' },
    { id: 'capacitor', name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', icon: '‚ö™', color: 'quantum-blue' },
    { id: 'led', name: '–°–≤–µ—Ç–æ–¥–∏–æ–¥', icon: 'üí°', color: 'quantum-yellow' },
    { id: 'switch', name: '–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å', icon: 'üîò', color: 'quantum-purple' },
    { id: 'wire', name: '–ü—Ä–æ–≤–æ–¥', icon: '‚ûñ', color: 'quantum-gray' }
  ];

  const opticalComponents = [
    { id: 'lens_converging', name: '–°–æ–±–∏—Ä–∞—é—â–∞—è –ª–∏–Ω–∑–∞', icon: 'üîç', color: 'quantum-blue' },
    { id: 'lens_diverging', name: '–†–∞—Å—Å–µ–∏–≤–∞—é—â–∞—è –ª–∏–Ω–∑–∞', icon: 'üîç', color: 'quantum-orange' },
    { id: 'mirror', name: '–ó–µ—Ä–∫–∞–ª–æ', icon: 'ü™û', color: 'quantum-silver' },
    { id: 'prism', name: '–ü—Ä–∏–∑–º–∞', icon: 'üî∫', color: 'quantum-purple' },
    { id: 'light_source', name: '–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞', icon: 'üí°', color: 'quantum-yellow' },
    { id: 'screen', name: '–≠–∫—Ä–∞–Ω', icon: '‚¨ú', color: 'quantum-gray' }
  ];

  const waveComponents = [
    { id: 'wave_source', name: '–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–æ–ª–Ω', icon: '„Ä∞Ô∏è', color: 'quantum-blue' },
    { id: 'barrier', name: '–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ', icon: '‚¨õ', color: 'quantum-gray' },
    { id: 'slit', name: '–©–µ–ª—å', icon: '||', color: 'quantum-orange' },
    { id: 'detector', name: '–î–µ—Ç–µ–∫—Ç–æ—Ä', icon: 'üì°', color: 'quantum-green' }
  ];

  const addComponent = (componentType: string) => {
    const newComponent: Component = {
      id: `${componentType}_${Date.now()}`,
      type: componentType,
      x: 100 + Math.random() * 200,
      y: 100 + Math.random() * 200,
      rotation: 0,
      properties: getDefaultProperties(componentType)
    };
    setComponents([...components, newComponent]);
  };

  const getDefaultProperties = (type: string) => {
    switch (type) {
      case 'battery':
        return { voltage: 9 };
      case 'resistor':
        return { resistance: 100 };
      case 'capacitor':
        return { capacitance: 1000 };
      case 'lens_converging':
        return { focalLength: 50 };
      case 'lens_diverging':
        return { focalLength: -50 };
      case 'light_source':
        return { wavelength: 550, intensity: 100 };
      case 'wave_source':
        return { frequency: 440, amplitude: 1 };
      default:
        return {};
    }
  };

  const removeComponent = (id: string) => {
    setComponents(components.filter(c => c.id !== id));
    if (selectedComponent === id) {
      setSelectedComponent(null);
    }
  };

  const updateComponentProperty = (id: string, property: string, value: any) => {
    setComponents(components.map(c => 
      c.id === id 
        ? { ...c, properties: { ...c.properties, [property]: value } }
        : c
    ));
  };

  const runSimulation = () => {
    setIsSimulating(true);
    setTimeout(() => {
      setIsSimulating(false);
    }, 3000);
  };

  const clearLab = () => {
    setComponents([]);
    setSelectedComponent(null);
  };

  const getComponentIcon = (type: string) => {
    const allComponents = [...electricalComponents, ...opticalComponents, ...waveComponents];
    return allComponents.find(c => c.id === type)?.icon || '‚ö™';
  };

  const renderComponentProperties = () => {
    if (!selectedComponent) return null;
    
    const component = components.find(c => c.id === selectedComponent);
    if (!component) return null;

    return (
      <Card className="bg-card/90">
        <CardHeader>
          <CardTitle className="text-lg">–°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-sm">
            <strong>–¢–∏–ø:</strong> {component.type}
          </div>
          
          {component.type === 'battery' && (
            <div>
              <label className="text-sm font-semibold mb-2 block">
                –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {component.properties.voltage} –í
              </label>
              <Slider
                value={[component.properties.voltage]}
                onValueChange={([value]) => updateComponentProperty(component.id, 'voltage', value)}
                min={1}
                max={24}
                step={1}
              />
            </div>
          )}
          
          {component.type === 'resistor' && (
            <div>
              <label className="text-sm font-semibold mb-2 block">
                –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {component.properties.resistance} Œ©
              </label>
              <Slider
                value={[component.properties.resistance]}
                onValueChange={([value]) => updateComponentProperty(component.id, 'resistance', value)}
                min={10}
                max={1000}
                step={10}
              />
            </div>
          )}
          
          {component.type === 'light_source' && (
            <div className="space-y-3">
              <div>
                <label className="text-sm font-semibold mb-2 block">
                  –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã: {component.properties.wavelength} –Ω–º
                </label>
                <Slider
                  value={[component.properties.wavelength]}
                  onValueChange={([value]) => updateComponentProperty(component.id, 'wavelength', value)}
                  min={400}
                  max={700}
                  step={10}
                />
              </div>
              <div>
                <label className="text-sm font-semibold mb-2 block">
                  –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {component.properties.intensity}%
                </label>
                <Slider
                  value={[component.properties.intensity]}
                  onValueChange={([value]) => updateComponentProperty(component.id, 'intensity', value)}
                  min={0}
                  max={100}
                  step={5}
                />
              </div>
            </div>
          )}
          
          <Button
            onClick={() => removeComponent(component.id)}
            variant="destructive"
            size="sm"
          >
            –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
          </Button>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="space-y-6">
      <Card className="energy-border bg-card/90">
        <CardHeader>
          <CardTitle className="text-2xl text-glow text-quantum-blue flex items-center gap-3">
            <Beaker className="w-8 h-8" />
            –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –§–∏–∑–∏—á–µ—Å–∫–∞—è –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
          </CardTitle>
          <p className="text-muted-foreground">
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∏ –∏–∑—É—á–∞–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è
          </p>
        </CardHeader>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Component Library */}
        <div className="space-y-4">
          <Card className="bg-card/90">
            <CardHeader>
              <CardTitle className="text-lg">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</CardTitle>
            </CardHeader>
            <CardContent>
              <Tabs value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="electrical" className="text-xs">
                    <Zap className="w-3 h-3 mr-1" />
                    –≠–ª–µ–∫—Ç—Ä–æ
                  </TabsTrigger>
                  <TabsTrigger value="optical" className="text-xs">
                    <Eye className="w-3 h-3 mr-1" />
                    –û–ø—Ç–∏–∫–∞
                  </TabsTrigger>
                  <TabsTrigger value="waves" className="text-xs">
                    <Waves className="w-3 h-3 mr-1" />
                    –í–æ–ª–Ω—ã
                  </TabsTrigger>
                </TabsList>
                
                <TabsContent value="electrical" className="space-y-2 mt-4">
                  {electricalComponents.map((component) => (
                    <Button
                      key={component.id}
                      onClick={() => addComponent(component.id)}
                      variant="outline"
                      className="w-full justify-start text-sm"
                    >
                      <span className="mr-2">{component.icon}</span>
                      {component.name}
                    </Button>
                  ))}
                </TabsContent>
                
                <TabsContent value="optical" className="space-y-2 mt-4">
                  {opticalComponents.map((component) => (
                    <Button
                      key={component.id}
                      onClick={() => addComponent(component.id)}
                      variant="outline"
                      className="w-full justify-start text-sm"
                    >
                      <span className="mr-2">{component.icon}</span>
                      {component.name}
                    </Button>
                  ))}
                </TabsContent>
                
                <TabsContent value="waves" className="space-y-2 mt-4">
                  {waveComponents.map((component) => (
                    <Button
                      key={component.id}
                      onClick={() => addComponent(component.id)}
                      variant="outline"
                      className="w-full justify-start text-sm"
                    >
                      <span className="mr-2">{component.icon}</span>
                      {component.name}
                    </Button>
                  ))}
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>

          {/* Controls */}
          <Card className="bg-card/90">
            <CardHeader>
              <CardTitle className="text-lg">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                onClick={runSimulation}
                disabled={isSimulating || components.length === 0}
                className="w-full bg-quantum-green hover:bg-quantum-green/80"
              >
                <Play className="w-4 h-4 mr-2" />
                {isSimulating ? '–°–∏–º—É–ª—è—Ü–∏—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
              </Button>
              
              <Button
                onClick={clearLab}
                variant="outline"
                className="w-full"
              >
                <RotateCcw className="w-4 h-4 mr-2" />
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
              
              <div className="flex gap-2">
                <Button variant="outline" size="sm" className="flex-1">
                  <Save className="w-3 h-3 mr-1" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
                <Button variant="outline" size="sm" className="flex-1">
                  <Share2 className="w-3 h-3 mr-1" />
                  –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Component Properties */}
          {renderComponentProperties()}
        </div>

        {/* Main Lab Area */}
        <div className="lg:col-span-3">
          <Card className="bg-card/90 h-[600px]">
            <CardHeader>
              <CardTitle className="text-lg flex items-center justify-between">
                <span>–†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å</span>
                <Badge>{components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="h-full p-0">
              <div 
                className="relative w-full h-full bg-lab-dark overflow-hidden"
                style={{
                  backgroundImage: `
                    linear-gradient(rgba(59, 130, 246, 0.1) 1px, transparent 1px),
                    linear-gradient(90deg, rgba(59, 130, 246, 0.1) 1px, transparent 1px)
                  `,
                  backgroundSize: `${gridSize}px ${gridSize}px`
                }}
              >
                {/* Grid overlay */}
                <div className="absolute inset-0 pointer-events-none">
                  {isSimulating && (
                    <div className="absolute inset-0 bg-quantum-blue/5 animate-pulse" />
                  )}
                </div>

                {/* Components */}
                {components.map((component) => (
                  <div
                    key={component.id}
                    className={`absolute cursor-pointer transform hover:scale-110 transition-all duration-200 ${
                      selectedComponent === component.id ? 'ring-2 ring-quantum-blue' : ''
                    }`}
                    style={{
                      left: component.x,
                      top: component.y,
                      transform: `rotate(${component.rotation}deg)`
                    }}
                    onClick={() => setSelectedComponent(component.id)}
                  >
                    <div className="bg-lab-surface/80 backdrop-blur-sm border border-lab-border rounded-lg p-3 min-w-[60px] text-center">
                      <div className="text-2xl mb-1">{getComponentIcon(component.type)}</div>
                      <div className="text-xs text-muted-foreground">
                        {component.type.replace('_', ' ')}
                      </div>
                      {isSimulating && (
                        <div className="absolute -inset-2 border-2 border-quantum-orange rounded-lg animate-ping" />
                      )}
                    </div>
                  </div>
                ))}

                {/* Instructions */}
                {components.length === 0 && (
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center text-muted-foreground">
                      <Beaker className="w-12 h-12 mx-auto mb-4 opacity-50" />
                      <p className="text-lg mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é!</p>
                      <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</p>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Educational Info */}
          <Card className="bg-gradient-to-r from-lab-surface to-quantum-blue/5 mt-4">
            <CardHeader>
              <CardTitle className="text-lg">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div>
                  <h4 className="font-semibold text-quantum-yellow mb-1">–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–∏</h4>
                  <p className="text-muted-foreground">
                    –°–æ–µ–¥–∏–Ω—è–π—Ç–µ –±–∞—Ç–∞—Ä–µ–π–∫–∏, —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã –∏ —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤ –û–º–∞
                  </p>
                </div>
                <div>
                  <h4 className="font-semibold text-quantum-blue mb-1">–û–ø—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã</h4>
                  <p className="text-muted-foreground">
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏–Ω–∑—ã –∏ –ø—Ä–∏–∑–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è –∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ —Å–≤–µ—Ç–∞
                  </p>
                </div>
                <div>
                  <h4 className="font-semibold text-quantum-purple mb-1">–í–æ–ª–Ω–æ–≤—ã–µ —è–≤–ª–µ–Ω–∏—è</h4>
                  <p className="text-muted-foreground">
                    –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–æ–ª–Ω –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏ –¥–∏—Ñ—Ä–∞–∫—Ü–∏—é
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default PhysicsLab;
