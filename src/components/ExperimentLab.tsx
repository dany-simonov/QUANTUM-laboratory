import React, { useState } from 'react';
import { Zap, Atom, Waves, Lightbulb, Timer, AlertCircle, Trophy, Target } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

interface ExperimentLabProps {
  gameState: any;
  onConductExperiment: (type: string, energyCost: number, knowledge: number) => void;
  onCompleteLevel: (levelData: any) => void;
}

interface Level {
  id: number;
  name: string;
  description: string;
  objective: string;
  hint: string;
  requiredExperiments: string[];
  reward: number;
  unlocked: boolean;
  completed: boolean;
  facts: string[];
}

interface Experiment {
  id: string;
  name: string;
  description: string;
  energyCost: number;
  requiredLevel: number;
  icon: React.ComponentType;
  color: string;
  knowledgeReward: string;
  duration: number;
}

const ExperimentLab: React.FC<ExperimentLabProps> = ({ gameState, onConductExperiment, onCompleteLevel }) => {
  const [activeExperiment, setActiveExperiment] = useState<string | null>(null);
  const [experimentProgress, setExperimentProgress] = useState(0);
  const [currentLevel, setCurrentLevel] = useState(1);
  const [completedExperiments, setCompletedExperiments] = useState<string[]>([]);

  const levels: Level[] = [
    {
      id: 1,
      name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ —Ñ–∏–∑–∏–∫–µ",
      description: "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Ñ–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞",
      objective: "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å —Ñ–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º",
      hint: "–°–≤–µ—Ç –º–æ–∂–µ—Ç –≤—ã–±–∏–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω—ã –∏–∑ –º–µ—Ç–∞–ª–ª–∞!",
      requiredExperiments: ['photoelectric'],
      reward: 50,
      unlocked: true,
      completed: false,
      facts: [
        "–§–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –±—ã–ª –æ–±—ä—è—Å–Ω–µ–Ω –≠–π–Ω—à—Ç–µ–π–Ω–æ–º –≤ 1905 –≥–æ–¥—É",
        "–ó–∞ —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–Ω –ø–æ–ª—É—á–∏–ª –ù–æ–±–µ–ª–µ–≤—Å–∫—É—é –ø—Ä–µ–º–∏—é –≤ 1921 –≥–æ–¥—É",
        "–≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ª–µ–∂–∏—Ç –≤ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—Ç—ã —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–π"
      ]
    },
    {
      id: 2,
      name: "–í–æ–ª–Ω—ã –∏ —á–∞—Å—Ç–∏—Ü—ã",
      description: "–ò–∑—É—á–∏—Ç–µ –∫–æ—Ä–ø—É—Å–∫—É–ª—è—Ä–Ω–æ-–≤–æ–ª–Ω–æ–≤–æ–π –¥—É–∞–ª–∏–∑–º",
      objective: "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç —Å –¥–≤—É–º—è —â–µ–ª—è–º–∏",
      hint: "–ß–∞—Å—Ç–∏—Ü—ã –º–æ–≥—É—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –≤–æ–ª–Ω—ã!",
      requiredExperiments: ['double_slit'],
      reward: 75,
      unlocked: false,
      completed: false,
      facts: [
        "–û–ø—ã—Ç –Æ–Ω–≥–∞ –¥–æ–∫–∞–∑–∞–ª –≤–æ–ª–Ω–æ–≤—É—é –ø—Ä–∏—Ä–æ–¥—É —Å–≤–µ—Ç–∞",
        "–≠–ª–µ–∫—Ç—Ä–æ–Ω—ã —Ç–æ–∂–µ –ø—Ä–æ—è–≤–ª—è—é—Ç –≤–æ–ª–Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞",
        "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü"
      ]
    },
    {
      id: 3,
      name: "–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü",
      description: "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å—É–±–∞—Ç–æ–º–Ω—ã–π –º–∏—Ä",
      objective: "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 3 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—é —á–∞—Å—Ç–∏—Ü",
      hint: "–í—ã—Å–æ–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Å–µ–∫—Ä–µ—Ç—ã –º–∞—Ç–µ—Ä–∏–∏",
      requiredExperiments: ['particle_collision', 'particle_collision', 'particle_collision'],
      reward: 100,
      unlocked: false,
      completed: false,
      facts: [
        "–ë–æ–ª—å—à–æ–π –∞–¥—Ä–æ–Ω–Ω—ã–π –∫–æ–ª–ª–∞–π–¥–µ—Ä - —Å–∞–º—ã–π –º–æ—â–Ω—ã–π —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å –≤ –º–∏—Ä–µ",
        "–ü—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è—Ö —Ä–æ–∂–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã",
        "–¢–∞–∫ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –±–æ–∑–æ–Ω –•–∏–≥–≥—Å–∞ –≤ 2012 –≥–æ–¥—É"
      ]
    },
    {
      id: 4,
      name: "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å",
      description: "–ò–∑—É—á–∏—Ç–µ —Å–∞–º–æ–µ —Å—Ç—Ä–∞–Ω–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–∏–∑–∏–∫–µ",
      objective: "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å—é",
      hint: '–≠–π–Ω—à—Ç–µ–π–Ω –Ω–∞–∑—ã–≤–∞–ª —ç—Ç–æ "–∂—É—Ç–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏"',
      requiredExperiments: ['quantum_entanglement'],
      reward: 150,
      unlocked: false,
      completed: false,
      facts: [
        "–ó–∞–ø—É—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã —Å–≤—è–∑–∞–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ –ª—é–±–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏",
        "–≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ë–µ–ª–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏"
      ]
    }
  ];

  const experiments: Experiment[] = [
    {
      id: 'photoelectric',
      name: '–§–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç',
      description: '–ò–∑—É—á–∏—Ç–µ, –∫–∞–∫ —Å–≤–µ—Ç –≤—ã–±–∏–≤–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω—ã –∏–∑ –º–µ—Ç–∞–ª–ª–∞. –û—Ç–∫—Ä—ã—Ç–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞!',
      energyCost: 15,
      requiredLevel: 1,
      icon: Lightbulb,
      color: 'quantum-yellow',
      knowledgeReward: '15-25',
      duration: 3
    },
    {
      id: 'double_slit',
      name: '–û–ø—ã—Ç —Å –¥–≤—É–º—è —â–µ–ª—è–º–∏',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–ø—É—Å–∫—É–ª—è—Ä–Ω–æ-–≤–æ–ª–Ω–æ–≤–æ–≥–æ –¥—É–∞–ª–∏–∑–º–∞ —á–∞—Å—Ç–∏—Ü.',
      energyCost: 25,
      requiredLevel: 2,
      icon: Waves,
      color: 'quantum-blue',
      knowledgeReward: '20-30',
      duration: 4
    },
    {
      id: 'particle_collision',
      name: '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü',
      description: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å—É–±–∞—Ç–æ–º–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –≤ –≤—ã—Å–æ–∫–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è—Ö.',
      energyCost: 35,
      requiredLevel: 3,
      icon: Atom,
      color: 'quantum-purple',
      knowledgeReward: '25-40',
      duration: 5
    },
    {
      id: 'quantum_entanglement',
      name: '–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å',
      description: '–ò–∑—É—á–∏—Ç–µ "–∂—É—Ç–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏" –≠–π–Ω—à—Ç–µ–π–Ω–∞.',
      energyCost: 45,
      requiredLevel: 4,
      icon: Zap,
      color: 'quantum-green',
      knowledgeReward: '30-50',
      duration: 7
    }
  ];

  const getCurrentLevel = () => {
    return levels.find(level => level.id === currentLevel);
  };

  const startExperiment = (experiment: Experiment) => {
    if (gameState.energy < experiment.energyCost) return;
    if (gameState.level < experiment.requiredLevel) return;

    setActiveExperiment(experiment.id);
    setExperimentProgress(0);

    const progressInterval = setInterval(() => {
      setExperimentProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          setActiveExperiment(null);
          
          const knowledge = Math.floor(Math.random() * 20) + 15;
          onConductExperiment(experiment.id, experiment.energyCost, knowledge);
          
          // Check level completion
          const newCompleted = [...completedExperiments, experiment.id];
          setCompletedExperiments(newCompleted);
          
          const currentLevelData = getCurrentLevel();
          if (currentLevelData && !currentLevelData.completed) {
            const requiredCount = currentLevelData.requiredExperiments.length;
            const completedCount = newCompleted.filter(exp => 
              currentLevelData.requiredExperiments.includes(exp)
            ).length;
            
            if (completedCount >= requiredCount) {
              onCompleteLevel({
                level: currentLevel,
                reward: currentLevelData.reward,
                name: currentLevelData.name
              });
              setCurrentLevel(prev => prev + 1);
            }
          }
          
          return 0;
        }
        return prev + (100 / experiment.duration);
      });
    }, 1000);
  };

  const currentLevelData = getCurrentLevel();

  return (
    <div className="space-y-6">
      <Card className="energy-border bg-card/90">
        <CardHeader>
          <CardTitle className="text-2xl text-glow text-quantum-blue flex items-center gap-3">
            <Target className="w-8 h-8" />
            –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
          </CardTitle>
          <p className="text-muted-foreground">
            –ü—Ä–æ–≤–æ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∏–∑—É—á–∞–π—Ç–µ —Ñ–∏–∑–∏–∫—É
          </p>
        </CardHeader>
      </Card>

      {/* Current Level */}
      {currentLevelData && (
        <Card className="border-quantum-green bg-gradient-to-r from-lab-surface to-quantum-green/10">
          <CardHeader>
            <CardTitle className="text-lg text-quantum-green flex items-center gap-2">
              <Trophy className="w-5 h-5" />
              –£—Ä–æ–≤–µ–Ω—å {currentLevel}: {currentLevelData.name}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-muted-foreground">{currentLevelData.description}</p>
            
            <div className="bg-lab-surface/50 p-4 rounded-lg border border-quantum-green/20">
              <h4 className="font-semibold text-quantum-green mb-2">üéØ –ó–∞–¥–∞–Ω–∏–µ:</h4>
              <p>{currentLevelData.objective}</p>
            </div>

            <div className="bg-lab-surface/50 p-4 rounded-lg border border-quantum-yellow/20">
              <h4 className="font-semibold text-quantum-yellow mb-2">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</h4>
              <p>{currentLevelData.hint}</p>
            </div>

            <div className="bg-lab-surface/50 p-4 rounded-lg border border-quantum-blue/20">
              <h4 className="font-semibold text-quantum-blue mb-2">üß† –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:</h4>
              <ul className="text-sm space-y-1">
                {currentLevelData.facts.map((fact, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <span className="text-quantum-blue">‚Ä¢</span>
                    {fact}
                  </li>
                ))}
              </ul>
            </div>

            <Badge className="bg-quantum-green/20 text-quantum-green">
              –ù–∞–≥—Ä–∞–¥–∞: {currentLevelData.reward} –∑–Ω–∞–Ω–∏–π
            </Badge>
          </CardContent>
        </Card>
      )}

      {/* Active Experiment */}
      {activeExperiment && (
        <Card className="border-quantum-orange bg-gradient-to-r from-lab-surface to-quantum-orange/10">
          <CardContent className="p-6">
            <div className="flex items-center gap-3 mb-4">
              <Timer className="w-5 h-5 text-quantum-orange animate-pulse" />
              <span className="font-semibold">–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</span>
            </div>
            <Progress value={experimentProgress} />
            <p className="text-sm text-muted-foreground mt-2">
              –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(experimentProgress)}%
            </p>
          </CardContent>
        </Card>
      )}

      {/* Experiments Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {experiments.map((experiment) => {
          const Icon = experiment.icon;
          const isAvailable = gameState.level >= experiment.requiredLevel;
          const canAfford = gameState.energy >= experiment.energyCost;
          const isActive = activeExperiment === experiment.id;

          return (
            <Card 
              key={experiment.id}
              className={`${isAvailable ? 'energy-border' : 'border-lab-border'} 
                         ${isActive ? 'animate-energy-pulse' : ''} 
                         bg-card/90 transition-all hover:scale-105`}
            >
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-3">
                    <Icon className={`w-6 h-6 text-${experiment.color}`} />
                    <div>
                      <CardTitle className="text-lg">{experiment.name}</CardTitle>
                      <p className="text-sm text-muted-foreground mt-1">
                        {experiment.description}
                      </p>
                    </div>
                  </div>
                </div>
              </CardHeader>

              <CardContent>
                <div className="space-y-4">
                  <div className="flex flex-wrap gap-2">
                    <Badge 
                      variant={canAfford ? "default" : "destructive"}
                      className="flex items-center gap-1"
                    >
                      <Zap className="w-3 h-3" />
                      {experiment.energyCost} —ç–Ω–µ—Ä–≥–∏–∏
                    </Badge>
                    <Badge 
                      variant={isAvailable ? "default" : "secondary"}
                      className={`text-${experiment.color}`}
                    >
                      –£—Ä–æ–≤–µ–Ω—å {experiment.requiredLevel}
                    </Badge>
                    <Badge variant="outline">
                      {experiment.knowledgeReward} –∑–Ω–∞–Ω–∏–π
                    </Badge>
                  </div>

                  {!isAvailable && (
                    <div className="flex items-center gap-2 text-muted-foreground">
                      <AlertCircle className="w-4 h-4" />
                      <span className="text-sm">
                        –¢—Ä–µ–±—É–µ—Ç—Å—è {experiment.requiredLevel} —É—Ä–æ–≤–µ–Ω—å
                      </span>
                    </div>
                  )}

                  <Button
                    onClick={() => startExperiment(experiment)}
                    disabled={!isAvailable || !canAfford || isActive || activeExperiment !== null}
                    className={`w-full bg-${experiment.color} hover:bg-${experiment.color}/80 text-black`}
                  >
                    {isActive ? '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∏–¥–µ—Ç...' : '–ù–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
};

export default ExperimentLab;
