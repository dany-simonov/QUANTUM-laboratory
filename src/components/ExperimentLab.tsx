
import React, { useState } from 'react';
import { Zap, Atom, Waves, Lightbulb, Timer, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

interface ExperimentLabProps {
  gameState: any;
  onConductExperiment: (type: string, energyCost: number) => void;
}

interface Experiment {
  id: string;
  name: string;
  description: string;
  energyCost: number;
  requiredLevel: number;
  icon: React.ComponentType;
  color: string;
  knowledgeReward: string;
  duration: number;
}

const ExperimentLab: React.FC<ExperimentLabProps> = ({ gameState, onConductExperiment }) => {
  const [activeExperiment, setActiveExperiment] = useState<string | null>(null);
  const [experimentProgress, setExperimentProgress] = useState(0);

  const experiments: Experiment[] = [
    {
      id: 'photoelectric',
      name: '–§–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç',
      description: '–ò–∑—É—á–∏—Ç–µ, –∫–∞–∫ —Å–≤–µ—Ç –≤—ã–±–∏–≤–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω—ã –∏–∑ –º–µ—Ç–∞–ª–ª–∞. –û—Ç–∫—Ä—ã—Ç–∏–µ –≠–π–Ω—à—Ç–µ–π–Ω–∞!',
      energyCost: 20,
      requiredLevel: 1,
      icon: Lightbulb,
      color: 'quantum-yellow',
      knowledgeReward: '15-25',
      duration: 3
    },
    {
      id: 'double_slit',
      name: '–û–ø—ã—Ç —Å –¥–≤—É–º—è —â–µ–ª—è–º–∏',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–ø—É—Å–∫—É–ª—è—Ä–Ω–æ-–≤–æ–ª–Ω–æ–≤–æ–≥–æ –¥—É–∞–ª–∏–∑–º–∞ —á–∞—Å—Ç–∏—Ü.',
      energyCost: 30,
      requiredLevel: 2,
      icon: Waves,
      color: 'quantum-blue',
      knowledgeReward: '20-30',
      duration: 5
    },
    {
      id: 'particle_collision',
      name: '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü',
      description: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å—É–±–∞—Ç–æ–º–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –≤ –≤—ã—Å–æ–∫–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è—Ö.',
      energyCost: 40,
      requiredLevel: 3,
      icon: Atom,
      color: 'quantum-purple',
      knowledgeReward: '25-40',
      duration: 7
    },
    {
      id: 'quantum_entanglement',
      name: '–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å',
      description: '–ò–∑—É—á–∏—Ç–µ "–∂—É—Ç–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏" –≠–π–Ω—à—Ç–µ–π–Ω–∞.',
      energyCost: 50,
      requiredLevel: 4,
      icon: Zap,
      color: 'quantum-green',
      knowledgeReward: '30-50',
      duration: 10
    }
  ];

  const startExperiment = (experiment: Experiment) => {
    if (gameState.energy < experiment.energyCost) return;
    if (gameState.level < experiment.requiredLevel) return;

    setActiveExperiment(experiment.id);
    setExperimentProgress(0);

    // Simulate experiment progress
    const progressInterval = setInterval(() => {
      setExperimentProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          setActiveExperiment(null);
          onConductExperiment(experiment.id, experiment.energyCost);
          return 0;
        }
        return prev + (100 / experiment.duration);
      });
    }, 1000);
  };

  return (
    <div className="space-y-6">
      <Card className="energy-border bg-card/90">
        <CardHeader>
          <CardTitle className="text-2xl text-glow text-quantum-blue flex items-center gap-3">
            <Zap className="w-8 h-8" />
            –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
          </CardTitle>
          <p className="text-muted-foreground">
            –ü—Ä–æ–≤–æ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —è–≤–ª–µ–Ω–∏—è —Ñ–∏–∑–∏–∫–∏
          </p>
        </CardHeader>
      </Card>

      {/* Active Experiment */}
      {activeExperiment && (
        <Card className="border-quantum-orange bg-gradient-to-r from-lab-surface to-quantum-orange/10">
          <CardContent className="p-6">
            <div className="flex items-center gap-3 mb-4">
              <Timer className="w-5 h-5 text-quantum-orange animate-pulse" />
              <span className="font-semibold">–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</span>
            </div>
            <Progress value={experimentProgress} />
            <p className="text-sm text-muted-foreground mt-2">
              –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(experimentProgress)}%
            </p>
          </CardContent>
        </Card>
      )}

      {/* Experiments Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {experiments.map((experiment) => {
          const Icon = experiment.icon;
          const isAvailable = gameState.level >= experiment.requiredLevel;
          const canAfford = gameState.energy >= experiment.energyCost;
          const isActive = activeExperiment === experiment.id;

          return (
            <Card 
              key={experiment.id}
              className={`${isAvailable ? 'energy-border' : 'border-lab-border'} 
                         ${isActive ? 'animate-energy-pulse' : ''} 
                         bg-card/90 transition-all hover:scale-105`}
            >
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-3">
                    <Icon className={`w-6 h-6 text-${experiment.color}`} />
                    <div>
                      <CardTitle className="text-lg">{experiment.name}</CardTitle>
                      <p className="text-sm text-muted-foreground mt-1">
                        {experiment.description}
                      </p>
                    </div>
                  </div>
                </div>
              </CardHeader>

              <CardContent>
                <div className="space-y-4">
                  <div className="flex flex-wrap gap-2">
                    <Badge 
                      variant={canAfford ? "default" : "destructive"}
                      className="flex items-center gap-1"
                    >
                      <Zap className="w-3 h-3" />
                      {experiment.energyCost} —ç–Ω–µ—Ä–≥–∏–∏
                    </Badge>
                    <Badge 
                      variant={isAvailable ? "default" : "secondary"}
                      className={`text-${experiment.color}`}
                    >
                      –£—Ä–æ–≤–µ–Ω—å {experiment.requiredLevel}
                    </Badge>
                    <Badge variant="outline">
                      {experiment.knowledgeReward} –∑–Ω–∞–Ω–∏–π
                    </Badge>
                  </div>

                  {!isAvailable && (
                    <div className="flex items-center gap-2 text-muted-foreground">
                      <AlertCircle className="w-4 h-4" />
                      <span className="text-sm">
                        –¢—Ä–µ–±—É–µ—Ç—Å—è {experiment.requiredLevel} —É—Ä–æ–≤–µ–Ω—å
                      </span>
                    </div>
                  )}

                  <Button
                    onClick={() => startExperiment(experiment)}
                    disabled={!isAvailable || !canAfford || isActive || activeExperiment !== null}
                    className={`w-full bg-${experiment.color} hover:bg-${experiment.color}/80 text-black`}
                  >
                    {isActive ? '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∏–¥–µ—Ç...' : '–ù–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Tips */}
      <Card className="bg-lab-surface/50 border-quantum-blue/30">
        <CardContent className="p-4">
          <h3 className="font-semibold text-quantum-blue mb-2">üí° –°–æ–≤–µ—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è:</h3>
          <ul className="text-sm text-muted-foreground space-y-1">
            <li>‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥</li>
            <li>‚Ä¢ –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –¥–∞—é—Ç –±–æ–ª—å—à–µ –∑–Ω–∞–Ω–∏–π</li>
            <li>‚Ä¢ –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã</li>
            <li>‚Ä¢ –ö–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—É—á–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏—è—Ö</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
};

export default ExperimentLab;
